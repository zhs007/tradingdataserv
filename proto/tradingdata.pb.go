// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tradingdata.proto

package tradingdatapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TRADETYPE int32

const (
	TRADETYPE_TRADETYPE_BUY  TRADETYPE = 0
	TRADETYPE_TRADETYPE_SELL TRADETYPE = 1
)

var TRADETYPE_name = map[int32]string{
	0: "TRADETYPE_BUY",
	1: "TRADETYPE_SELL",
}
var TRADETYPE_value = map[string]int32{
	"TRADETYPE_BUY":  0,
	"TRADETYPE_SELL": 1,
}

func (x TRADETYPE) String() string {
	return proto.EnumName(TRADETYPE_name, int32(x))
}
func (TRADETYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tradingdata_0735d51fc0dd9161, []int{0}
}

type TradeInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Curtime              int64    `protobuf:"varint,2,opt,name=curtime,proto3" json:"curtime,omitempty"`
	Price                float32  `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Size                 float32  `protobuf:"fixed32,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeInfo) Reset()         { *m = TradeInfo{} }
func (m *TradeInfo) String() string { return proto.CompactTextString(m) }
func (*TradeInfo) ProtoMessage()    {}
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tradingdata_0735d51fc0dd9161, []int{0}
}
func (m *TradeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeInfo.Unmarshal(m, b)
}
func (m *TradeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeInfo.Marshal(b, m, deterministic)
}
func (dst *TradeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeInfo.Merge(dst, src)
}
func (m *TradeInfo) XXX_Size() int {
	return xxx_messageInfo_TradeInfo.Size(m)
}
func (m *TradeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TradeInfo proto.InternalMessageInfo

func (m *TradeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TradeInfo) GetCurtime() int64 {
	if m != nil {
		return m.Curtime
	}
	return 0
}

func (m *TradeInfo) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TradeInfo) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type SendTradeData struct {
	Market               string       `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Symbol               string       `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Trades               []*TradeInfo `protobuf:"bytes,3,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendTradeData) Reset()         { *m = SendTradeData{} }
func (m *SendTradeData) String() string { return proto.CompactTextString(m) }
func (*SendTradeData) ProtoMessage()    {}
func (*SendTradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_tradingdata_0735d51fc0dd9161, []int{1}
}
func (m *SendTradeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTradeData.Unmarshal(m, b)
}
func (m *SendTradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTradeData.Marshal(b, m, deterministic)
}
func (dst *SendTradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTradeData.Merge(dst, src)
}
func (m *SendTradeData) XXX_Size() int {
	return xxx_messageInfo_SendTradeData.Size(m)
}
func (m *SendTradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTradeData.DiscardUnknown(m)
}

var xxx_messageInfo_SendTradeData proto.InternalMessageInfo

func (m *SendTradeData) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *SendTradeData) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SendTradeData) GetTrades() []*TradeInfo {
	if m != nil {
		return m.Trades
	}
	return nil
}

type ReplySendTradeData struct {
	Nums                 int32    `protobuf:"varint,1,opt,name=nums,proto3" json:"nums,omitempty"`
	ErrInfo              string   `protobuf:"bytes,2,opt,name=errInfo,proto3" json:"errInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplySendTradeData) Reset()         { *m = ReplySendTradeData{} }
func (m *ReplySendTradeData) String() string { return proto.CompactTextString(m) }
func (*ReplySendTradeData) ProtoMessage()    {}
func (*ReplySendTradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_tradingdata_0735d51fc0dd9161, []int{2}
}
func (m *ReplySendTradeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplySendTradeData.Unmarshal(m, b)
}
func (m *ReplySendTradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplySendTradeData.Marshal(b, m, deterministic)
}
func (dst *ReplySendTradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplySendTradeData.Merge(dst, src)
}
func (m *ReplySendTradeData) XXX_Size() int {
	return xxx_messageInfo_ReplySendTradeData.Size(m)
}
func (m *ReplySendTradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplySendTradeData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplySendTradeData proto.InternalMessageInfo

func (m *ReplySendTradeData) GetNums() int32 {
	if m != nil {
		return m.Nums
	}
	return 0
}

func (m *ReplySendTradeData) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

func init() {
	proto.RegisterType((*TradeInfo)(nil), "tradingdatapb.TradeInfo")
	proto.RegisterType((*SendTradeData)(nil), "tradingdatapb.SendTradeData")
	proto.RegisterType((*ReplySendTradeData)(nil), "tradingdatapb.ReplySendTradeData")
	proto.RegisterEnum("tradingdatapb.TRADETYPE", TRADETYPE_name, TRADETYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// translate - translate text
	SendTradeData(ctx context.Context, in *SendTradeData, opts ...grpc.CallOption) (*ReplySendTradeData, error)
}

type tradingDataServiceClient struct {
	cc *grpc.ClientConn
}

func NewTradingDataServiceClient(cc *grpc.ClientConn) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) SendTradeData(ctx context.Context, in *SendTradeData, opts ...grpc.CallOption) (*ReplySendTradeData, error) {
	out := new(ReplySendTradeData)
	err := c.cc.Invoke(ctx, "/tradingdatapb.TradingDataService/sendTradeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
type TradingDataServiceServer interface {
	// translate - translate text
	SendTradeData(context.Context, *SendTradeData) (*ReplySendTradeData, error)
}

func RegisterTradingDataServiceServer(s *grpc.Server, srv TradingDataServiceServer) {
	s.RegisterService(&_TradingDataService_serviceDesc, srv)
}

func _TradingDataService_SendTradeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTradeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).SendTradeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tradingdatapb.TradingDataService/SendTradeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).SendTradeData(ctx, req.(*SendTradeData))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tradingdatapb.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendTradeData",
			Handler:    _TradingDataService_SendTradeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradingdata.proto",
}

func init() { proto.RegisterFile("tradingdata.proto", fileDescriptor_tradingdata_0735d51fc0dd9161) }

var fileDescriptor_tradingdata_0735d51fc0dd9161 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4f, 0xfa, 0x30,
	0x18, 0xc6, 0xd9, 0x06, 0x7c, 0xb3, 0xf7, 0x9b, 0x11, 0x78, 0x63, 0x4c, 0x63, 0x3c, 0xcc, 0x9d,
	0x16, 0x0f, 0xc4, 0xe0, 0x5f, 0x20, 0x61, 0x07, 0x13, 0x0e, 0xa6, 0x9b, 0x07, 0x4e, 0xa4, 0xa3,
	0x55, 0x1b, 0xd9, 0x0f, 0xbb, 0x62, 0x82, 0x7f, 0xbd, 0x69, 0x19, 0xe8, 0xf0, 0xf6, 0x3e, 0x4f,
	0xdb, 0x7c, 0x9e, 0xa7, 0x2f, 0x4c, 0xb4, 0x62, 0x5c, 0x96, 0xaf, 0x9c, 0x69, 0x36, 0xad, 0x55,
	0xa5, 0x2b, 0x0c, 0x7e, 0x59, 0x75, 0x1e, 0xad, 0xc1, 0xcf, 0x14, 0xe3, 0xe2, 0xb1, 0x7c, 0xa9,
	0x70, 0x04, 0xae, 0xe4, 0xc4, 0x09, 0x9d, 0xd8, 0xa7, 0xae, 0xe4, 0x48, 0xe0, 0xdf, 0x66, 0xa7,
	0xb4, 0x2c, 0x04, 0x71, 0x43, 0x27, 0xf6, 0xe8, 0x51, 0xe2, 0x05, 0x0c, 0x6a, 0x25, 0x37, 0x82,
	0x78, 0xa1, 0x13, 0xbb, 0xf4, 0x20, 0x10, 0xa1, 0xdf, 0xc8, 0x2f, 0x41, 0xfa, 0xd6, 0xb4, 0x73,
	0xf4, 0x01, 0x41, 0x2a, 0x4a, 0x6e, 0x21, 0x0b, 0xa6, 0x19, 0x5e, 0xc2, 0xb0, 0x60, 0xea, 0x5d,
	0xe8, 0x16, 0xd4, 0x2a, 0xe3, 0x37, 0xfb, 0x22, 0xaf, 0xb6, 0x96, 0xe5, 0xd3, 0x56, 0xe1, 0x1d,
	0x0c, 0x4d, 0x64, 0xd1, 0x10, 0x2f, 0xf4, 0xe2, 0xff, 0x33, 0x32, 0xed, 0x34, 0x98, 0x9e, 0xe2,
	0xd3, 0xf6, 0x5e, 0x34, 0x07, 0xa4, 0xa2, 0xde, 0xee, 0xbb, 0x5c, 0x84, 0x7e, 0xb9, 0x2b, 0x1a,
	0x4b, 0x1d, 0x50, 0x3b, 0x9b, 0x82, 0x42, 0x29, 0xf3, 0xb8, 0x85, 0x1e, 0xe5, 0xed, 0x0c, 0xfc,
	0x8c, 0x3e, 0x2c, 0x92, 0x6c, 0xf5, 0x94, 0xe0, 0x04, 0x82, 0x93, 0x58, 0xcf, 0x9f, 0x57, 0xe3,
	0x1e, 0x22, 0x8c, 0x7e, 0xac, 0x34, 0x59, 0x2e, 0xc7, 0xce, 0xec, 0x0d, 0x30, 0x3b, 0x44, 0x33,
	0xc0, 0x54, 0xa8, 0x4f, 0xf3, 0x29, 0x14, 0x82, 0xa6, 0x13, 0xe4, 0xfa, 0xac, 0x40, 0x27, 0xe6,
	0xd5, 0xcd, 0xd9, 0xe9, 0xdf, 0x26, 0x51, 0x2f, 0x1f, 0xda, 0x5d, 0xde, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x45, 0xd7, 0x0b, 0xe5, 0xe0, 0x01, 0x00, 0x00,
}
